"use strict";(self.webpackChunktechnical_tutorial=self.webpackChunktechnical_tutorial||[]).push([[1571],{5625:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var t=i(6070),s=i(5296);const r={},o="Setup ESLint, Prettier, commitlint, lint-staged and Husky v7 pre-commit and commit-msg git hooks for a ReactJS Project with VSCode Editor from scratch",l={id:"software-development/frontend/reactjs/eslint-prettier-reactjs",title:"Setup ESLint, Prettier, commitlint, lint-staged and Husky v7 pre-commit and commit-msg git hooks for a ReactJS Project with VSCode Editor from scratch",description:"_Goal: In this tutorial, we will check code quality (ESLint) and code format (Prettier) for the changes of staged files (lint-staged) before we push a commit with conventional commit format (commitlint)._",source:"@site/docs/software-development/frontend/reactjs/eslint-prettier-reactjs.md",sourceDirName:"software-development/frontend/reactjs",slug:"/software-development/frontend/reactjs/eslint-prettier-reactjs",permalink:"/TechnicalTutorial/docs/software-development/frontend/reactjs/eslint-prettier-reactjs",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"softwareDevlopmentSidebar",previous:{title:"Backend Unit Test",permalink:"/TechnicalTutorial/docs/software-development/backend/unit-test"},next:{title:"Add Redux to React Native",permalink:"/TechnicalTutorial/docs/software-development/frontend/reactnative/add-redux-to-react-native"}},c={},d=[{value:"<strong><em>Goal: In this tutorial, we will check code quality (<code>ESLint</code>) and code format (<code>Prettier</code>) for the changes of staged files (<code>lint-staged</code>) before we push a commit with conventional commit format (<code>commitlint</code>).</em></strong>",id:"goal-in-this-tutorial-we-will-check-code-quality-eslint-and-code-format-prettier-for-the-changes-of-staged-files-lint-staged-before-we-push-a-commit-with-conventional-commit-format-commitlint",level:3},{value:"ESLint",id:"eslint",level:2},{value:"Setup ESLint",id:"setup-eslint",level:3},{value:"Config ESLint with Airbnb Package",id:"config-eslint-with-airbnb-package",level:3},{value:"Normal Problems",id:"normal-problems",level:3},{value:"ESLint ignore file",id:"eslint-ignore-file",level:3},{value:"Run ESLint",id:"run-eslint",level:3},{value:"Check specific file",id:"check-specific-file",level:4},{value:"Fix errors automatically",id:"fix-errors-automatically",level:4},{value:"Run ESLint with ignoring warnings",id:"run-eslint-with-ignoring-warnings",level:4},{value:"Prettier",id:"prettier",level:2},{value:"eslint-plugin-prettier",id:"eslint-plugin-prettier",level:4},{value:"eslint-config-prettier",id:"eslint-config-prettier",level:4},{value:"VSCode Prettier Plugin",id:"vscode-prettier-plugin",level:3},{value:"Prettier Installation",id:"prettier-installation",level:3},{value:"Config Prettier",id:"config-prettier",level:3},{value:"Add Prettier ignore file",id:"add-prettier-ignore-file",level:3},{value:"Add Prettier as npm command",id:"add-prettier-as-npm-command",level:3},{value:"commitlint",id:"commitlint",level:2},{value:"Install commitlint",id:"install-commitlint",level:3},{value:"Create <code>commitlint.config.js</code> file",id:"create-commitlintconfigjs-file",level:3},{value:"Test the configuration",id:"test-the-configuration",level:3},{value:"lint-staged",id:"lint-staged",level:2},{value:"Install lint-staged",id:"install-lint-staged",level:3},{value:"Config lint-staged",id:"config-lint-staged",level:3},{value:"Husky",id:"husky",level:2},{value:"Install Husky",id:"install-husky",level:3},{value:"Enable Git hooks",id:"enable-git-hooks",level:3},{value:"Support commitlint with commit-msg git hook",id:"support-commitlint-with-commit-msg-git-hook",level:3},{value:"Support lint-staged with pre-commit git hook",id:"support-lint-staged-with-pre-commit-git-hook",level:3},{value:"Conclusion",id:"conclusion",level:2}];function a(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"setup-eslint-prettier-commitlint-lint-staged-and-husky-v7-pre-commit-and-commit-msg-git-hooks-for-a-reactjs-project-with-vscode-editor-from-scratch",children:"Setup ESLint, Prettier, commitlint, lint-staged and Husky v7 pre-commit and commit-msg git hooks for a ReactJS Project with VSCode Editor from scratch"})}),"\n",(0,t.jsx)(n.h3,{id:"goal-in-this-tutorial-we-will-check-code-quality-eslint-and-code-format-prettier-for-the-changes-of-staged-files-lint-staged-before-we-push-a-commit-with-conventional-commit-format-commitlint",children:(0,t.jsx)(n.strong,{children:(0,t.jsxs)(n.em,{children:["Goal: In this tutorial, we will check code quality (",(0,t.jsx)(n.code,{children:"ESLint"}),") and code format (",(0,t.jsx)(n.code,{children:"Prettier"}),") for the changes of staged files (",(0,t.jsx)(n.code,{children:"lint-staged"}),") before we push a commit with conventional commit format (",(0,t.jsx)(n.code,{children:"commitlint"}),")."]})})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"ESLint -"})," ",(0,t.jsx)(n.a,{href:"https://eslint.org/docs/user-guide/getting-started",children:"ESLint"})," is a tool for identifying and reporting on patterns found in ECMAScript/Javascript code, with the goal of making code more consistent and avoiding bugs."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Prettier -"})," ",(0,t.jsx)(n.a,{href:"https://prettier.io/docs/en/index.html",children:"Prettier"})," is an opinionated code formatter that ensures that all outputted code conforms to a consistent style."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"commitlint -"})," ",(0,t.jsx)(n.a,{href:"https://github.com/conventional-changelog/commitlint#what-is-commitlint",children:"commitlint"})," is a tool to check if your commit messages meet the ",(0,t.jsx)(n.a,{href:"https://www.conventionalcommits.org/en/v1.0.0/",children:"conventional commit format"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"lint-staged -"})," ",(0,t.jsx)(n.a,{href:"https://github.com/okonet/lint-staged",children:"lint-staged"})," is a tool that runs linters to make sure your staged file get formatted before commintting to your code base."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Husky -"})," ",(0,t.jsx)(n.a,{href:"https://typicode.github.io/husky/#/",children:"Husky"})," is a tool that can help you easily to trigger the git hooks and run your scripts at each git hook stage."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks",children:"Git Hooks"})," that we will use in this tutorial"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"commit-msg"})," is a git hook that validates your project state or commit message before allowing a commit to go through."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"pre-commit"})," is a git hook that is useful for identifying issues before code submission. It even run before you type a commit message."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"eslint",children:"ESLint"}),"\n",(0,t.jsx)(n.p,{children:"ESLint is a javascript tool that can check your code for potential errors and bad code practices. It helps you enforce a code statndard and style guide in your codebase."}),"\n",(0,t.jsxs)(n.p,{children:["If you create your ReactJS app with ",(0,t.jsx)(n.a,{href:"https://reactjs.org/docs/create-a-new-react-app.html",children:"Create React App"}),", the basic ESLint setup has been included in your project."]}),"\n",(0,t.jsxs)(n.p,{children:["Nowadays the most popular style guides based on ESLint is ",(0,t.jsx)(n.a,{href:"https://github.com/airbnb/javascript",children:"Airbnb Javascript Style Guide"}),". We will use Airbnb rules in this tutorial."]}),"\n",(0,t.jsx)(n.h3,{id:"setup-eslint",children:"Setup ESLint"}),"\n",(0,t.jsx)(n.p,{children:"Run the below command to install the ESLint to the project."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"npm:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install eslint --save-dev\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"yarn:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"yarn add eslint --dev\n"})}),"\n",(0,t.jsx)(n.p,{children:"If you want to install ESLint globally cross all of your projects, you can install ESLint with"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"npm:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install -g eslint\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"yarn:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"yarn add -g eslint\n"})}),"\n",(0,t.jsx)(n.p,{children:"I personally prefer to use local eslint, So I will use local eslint for the rest of the tutorial."}),"\n",(0,t.jsx)(n.h3,{id:"config-eslint-with-airbnb-package",children:"Config ESLint with Airbnb Package"}),"\n",(0,t.jsx)(n.p,{children:"Creating a ESLint configuration file with running:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npx eslint --init\n"})}),"\n",(0,t.jsx)(n.p,{children:"You need to answer serveral questions about configuration files."}),"\n",(0,t.jsx)(n.p,{children:"Here is my choices:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"How would you like to use ESLint?"})})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"\u2023 To check syntax, find problems, and enforce code style"})})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"What type of modules does your project use?"})})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"\u2023 JavaScript modules (import/export)"})})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"Which framework does your project use?"})})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"\u2023 React"})})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"Does your project use TypeScript?"})})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"\u2023 No"})})," (Depends on which language you use in your project)"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"Where does your code run?"})})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"Browser"})})," (Choose Node if you are programing backend)"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"How would you like to define a style for your project?"})})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"\u25b8 Use a popular style guide"})})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"Which style guide do you want to follow?"})})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:(0,t.jsxs)(n.em,{children:["Airbnb: ",(0,t.jsx)(n.a,{href:"https://github.com/airbnb/javascript",children:"https://github.com/airbnb/javascript"})]})})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"What format do you want your config file to be in?"})})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"\u25b8 JSON"})})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Then the programe will check dependencies and ask if you want to install the dependencies."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"The config that you've selected requires the following dependencies:\n\neslint-plugin-react@^7.21.5 eslint-config-airbnb@latest eslint@^5.16.0 || ^6.8.0 || ^7.2.0 eslint-plugin-import@^2.22.1 eslint-plugin-jsx-a11y@^6.4.1 eslint-plugin-react-hooks@^4 || ^3 || ^2.3.0 || ^1.7.0\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Choose ",(0,t.jsx)(n.code,{children:"yes"})," to install all the dependencies"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"Would you like to install them now with npm?"})})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"\u2023 Yes"})})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Now after you install the ESLint with Airbnb package,"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Open your VSCode,"}),"\n",(0,t.jsxs)(n.li,{children:["Go to ",(0,t.jsx)(n.code,{children:"Extensions"})," ",(0,t.jsx)("img",{src:"https://user-images.githubusercontent.com/10986601/124714671-9ec5f900-df34-11eb-8753-06bcab58f58d.png",width:"25",height:"25"}),","]}),"\n",(0,t.jsxs)(n.li,{children:["Search ",(0,t.jsx)(n.code,{children:"ESlint"}),","]}),"\n",(0,t.jsxs)(n.li,{children:["Choose the one made by ",(0,t.jsx)(n.code,{children:"Microsoft"}),","]}),"\n",(0,t.jsx)(n.li,{children:"Reopen your project with VSCode."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Open the VSCode terminal and click the ",(0,t.jsx)(n.code,{children:"PROBLEMS"})," tab, you will see ESLint already checked your file's potential syntax problems based on the Airbnb rules that you installed with above steps."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:"https://user-images.githubusercontent.com/10986601/124716273-7939ef00-df36-11eb-878f-00b72ee72999.png",alt:"image"})}),"\n",(0,t.jsxs)(n.p,{children:["And there will be an ",(0,t.jsx)(n.code,{children:".eslintrc.json"})," file created at your project root folder."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "env": {\n    "browser": true,\n    "es2021": true\n  },\n  "extends": ["airbnb"],\n  "parserOptions": {\n    "ecmaFeatures": {\n      "jsx": true\n    },\n    "ecmaVersion": 12,\n    "sourceType": "module"\n  },\n  "plugins": [],\n  "rules": {}\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["You can put your rules under the ",(0,t.jsx)(n.code,{children:"rules"})," block."]}),"\n",(0,t.jsx)(n.h3,{id:"normal-problems",children:"Normal Problems"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"'React' must be in scope when using JSX"})})}),"\n",(0,t.jsxs)(n.p,{children:["For React 17.x.x, based on ",(0,t.jsx)(n.a,{href:"https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html#eslint",children:"React Docs"}),"."]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["If you are using ",(0,t.jsx)(n.code,{children:"eslint-plugin-react"}),", the ",(0,t.jsx)(n.code,{children:"react/jsx-uses-react"}),"and ",(0,t.jsx)(n.code,{children:"react/react-in-jsx-scope rules"})," are no longer necessary and can be turned off or removed."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["So we can turn these two rules off at the ",(0,t.jsx)(n.code,{children:"rules"})," block (if exists):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  // ...\n  "rules": {\n    // ...\n    "react/jsx-uses-react": "off",\n    "react/react-in-jsx-scope": "off"\n  }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"JSX not allowed in files with extension '.js'"})})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://github.com/airbnb/javascript/tree/master/react#naming",children:"Airbnb React/JSX Style Guide"})," suggests to use ",(0,t.jsx)(n.code,{children:".jsx"})," extension for React components (eslint: react/jsx-filename-extension), you can rename your ",(0,t.jsx)(n.code,{children:".js"})," to ",(0,t.jsx)(n.code,{children:".jsx"}),". If you don't want to strictly use ",(0,t.jsx)(n.code,{children:".jsx"})," as extension of your files, you can turn the rules ",(0,t.jsx)(n.code,{children:"off"})," or add the following rules in the ",(0,t.jsx)(n.code,{children:".eslintrc.json"})," file"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  // ...\n  "rules": {\n    // ...\n    "react/jsx-filename-extension": [1, { "extensions": [".js", ".jsx"] }]\n  }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"For these who use Typescript, your can add rules like"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  // ...\n  "rules": {\n    // ...\n    "react/jsx-filename-extension": [\n      "error",\n      { "extensions": [".js", ".jsx", ".ts", ".tsx"] }\n    ]\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["For solving typescript common problems, please check ",(0,t.jsx)(n.a,{href:"https://andrebnassis.medium.com/setting-eslint-on-a-react-typescript-project-2021-1190a43ffba",children:"this tutorial"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"eslint-ignore-file",children:"ESLint ignore file"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:".eslintignore"})," is the file where we can add files and folders that will not be applied the ESLint rules."]}),"\n",(0,t.jsxs)(n.p,{children:["For example, we can add ",(0,t.jsx)(n.code,{children:"node_modules"})," into this file."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"node_modules/**\n"})}),"\n",(0,t.jsx)(n.h3,{id:"run-eslint",children:"Run ESLint"}),"\n",(0,t.jsx)(n.h4,{id:"check-specific-file",children:"Check specific file"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npx eslint yourTargetFile.js\n"})}),"\n",(0,t.jsx)(n.h4,{id:"fix-errors-automatically",children:"Fix errors automatically"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npx eslint yourTargetFile.js --fix\n"})}),"\n",(0,t.jsx)(n.h4,{id:"run-eslint-with-ignoring-warnings",children:"Run ESLint with ignoring warnings"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npx eslint yourTargetFile.js --quiet\n"})}),"\n",(0,t.jsx)(n.h2,{id:"prettier",children:"Prettier"}),"\n",(0,t.jsxs)(n.p,{children:["We use ",(0,t.jsx)(n.code,{children:"Prettier"})," to formate our code, cooperating with ESLinter. ",(0,t.jsx)(n.a,{href:"https://prettier.io/docs/en/comparison.html",children:"This article"})," is the comparition between ",(0,t.jsx)(n.code,{children:"Prettier"})," and ",(0,t.jsx)(n.code,{children:"Linters"}),". Based on ",(0,t.jsx)(n.a,{href:"https://prettier.io/docs/en/integrating-with-linters.html",children:"Integrating with Linters"}),", ",(0,t.jsx)(n.code,{children:"Prettier"})," is for ",(0,t.jsx)(n.code,{children:"code formatting concerns"}),", Linters are for ",(0,t.jsx)(n.code,{children:"code-quality concerns"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"eslint-plugin-prettier",children:"eslint-plugin-prettier"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"eslint-plugin-prettier"})," allows you run the Prettier as ESLint rule and report issues that differ from Prettier's expected output as ESLint errors."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://stackoverflow.com/questions/44690308/whats-the-difference-between-prettier-eslint-eslint-plugin-prettier-and-eslint",children:"This"})," is the comparison among ",(0,t.jsx)(n.code,{children:"eslint-config-pretter"}),", ",(0,t.jsx)(n.code,{children:"eslint-plugin-prettier"})," and ",(0,t.jsx)(n.code,{children:"prettier-eslint"})]}),"\n",(0,t.jsx)(n.h4,{id:"eslint-config-prettier",children:"eslint-config-prettier"}),"\n",(0,t.jsxs)(n.p,{children:["Since ESLint also contains stylistic rules which might conflict with Prettier, we can turn off these rules that conflict or are unnecessary with Prettier by using ",(0,t.jsx)(n.code,{children:"eslint-config-pretter"})]}),"\n",(0,t.jsx)(n.h3,{id:"vscode-prettier-plugin",children:"VSCode Prettier Plugin"}),"\n",(0,t.jsxs)(n.p,{children:["Open your VSCode Extensions and search ",(0,t.jsx)(n.code,{children:"Prettier"}),", install the ",(0,t.jsx)(n.code,{children:"Prettier - Code formatter"})," made by ",(0,t.jsx)(n.code,{children:"Prettier"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"prettier-installation",children:"Prettier Installation"}),"\n",(0,t.jsx)(n.p,{children:"In your project folder, install the dependencies about Prettier."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install prettier eslint-config-prettier eslint-plugin-prettier --save-dev\n"})}),"\n",(0,t.jsx)(n.h3,{id:"config-prettier",children:"Config Prettier"}),"\n",(0,t.jsxs)(n.p,{children:["Add ",(0,t.jsx)(n.code,{children:"eslint-plugin-prettier"})," to ",(0,t.jsx)(n.code,{children:'"prettier"'})," and ",(0,t.jsx)(n.code,{children:'"rules"'})," of your ",(0,t.jsx)(n.code,{children:".eslintrc.json"})," file that you created from last section."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "plugins": ["prettier"],\n  "rules": {\n    "prettier/prettier": "error"\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This plugin ships with a ",(0,t.jsx)(n.code,{children:"plugin:prettier/recommended"})," config that sets up both the ",(0,t.jsx)(n.code,{children:"plugin"})," and ",(0,t.jsx)(n.code,{children:"eslint-config-prettier"})," in one go."]}),"\n",(0,t.jsxs)(n.p,{children:["Add ",(0,t.jsx)(n.code,{children:"eslint-config-prettier"})," to ",(0,t.jsx)(n.code,{children:'"extends"'})," of your ",(0,t.jsx)(n.code,{children:".eslintrc.json"})," file that you created from last section."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  // ...\n  "extends": ["airbnb", "plugin:prettier/recommended"]\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Since airbnb rules could have conflict rules with Prettier, for example, Airbnb javascript style guide asks"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Always use double quotes (\") for JSX attributes, but single quotes (') for all other JS."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["However, Prettier uses ",(0,t.jsx)(n.a,{href:"https://prettier.io/docs/en/options.html#quotes",children:"double quotes"})," by default even though it doesn't suggest."]}),"\n",(0,t.jsxs)(n.p,{children:["For solving this kind of conflicts, We need to create a ",(0,t.jsx)(n.code,{children:".prettierrc"})," file under your project folder with code:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "semi": true,\n  "trailingComma": "es5",\n  "printWidth": 120,\n  "singleQuote": true,\n  "arrowParens": "always",\n  "proseWrap": "preserve"\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"add-prettier-ignore-file",children:"Add Prettier ignore file"}),"\n",(0,t.jsxs)(n.p,{children:["We can create ",(0,t.jsx)(n.code,{children:".prettierignore"})," file under the poject root folder to contain the files that we want to ignore prettier check."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"node_modules/**\n"})}),"\n",(0,t.jsx)(n.h3,{id:"add-prettier-as-npm-command",children:"Add Prettier as npm command"}),"\n",(0,t.jsx)(n.p,{children:"We can also format all of our code by using prettier with a command line."}),"\n",(0,t.jsxs)(n.p,{children:["Open your ",(0,t.jsx)(n.code,{children:"package.json"})," and add the below code block to your ",(0,t.jsx)(n.code,{children:"scripts"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  // ...\n  "scripts": {\n    // ...\n    "format": "prettier --write \\"**/*.{js,jsx,json,md}\\""\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"commitlint",children:"commitlint"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"commintlint"})," helps your team adhering to a commit convention. You can check ",(0,t.jsx)(n.a,{href:"https://www.conventionalcommits.org/en/v1.0.0/",children:"Conventional Commits"})," for more details."]}),"\n",(0,t.jsx)(n.h3,{id:"install-commitlint",children:"Install commitlint"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install @commitlint/cli @commitlint/config-conventional --save-dev\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"create-commitlintconfigjs-file",children:["Create ",(0,t.jsx)(n.code,{children:"commitlint.config.js"})," file"]}),"\n",(0,t.jsxs)(n.p,{children:["Create the ",(0,t.jsx)(n.code,{children:"commitlint.config.js"})," file at your project root folder, add the below configuration to the file."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"module.exports = { extends: ['@commitlint/config-conventional'] };\n"})}),"\n",(0,t.jsx)(n.h3,{id:"test-the-configuration",children:"Test the configuration"}),"\n",(0,t.jsx)(n.p,{children:"We install the commitlint locally, so run"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"echo 'foo: bar' | node_modules/.bin/commitlint\n"})}),"\n",(0,t.jsx)(n.p,{children:"We will get"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\u29d7   input: foo: bar\n\u2716   type must be one of [build, chore, ci, docs, feat, fix, perf, refactor, revert, style, test] [type-enum]\n\n\u2716   found 1 problems, 0 warnings\n\u24d8   Get help: https://github.com/conventional-changelog/commitlint/#what-is-commitlint\n"})}),"\n",(0,t.jsx)(n.h2,{id:"lint-staged",children:"lint-staged"}),"\n",(0,t.jsxs)(n.p,{children:["Since git hook (which we will install and use soon) will check all the files of the projects, this kind of checking will be time-consuming for a large project,. For solving this problem, we can install ",(0,t.jsx)(n.code,{children:"lint-staged"})," package to only check the files that are only changed and staged."]}),"\n",(0,t.jsx)(n.h3,{id:"install-lint-staged",children:"Install lint-staged"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install lint-staged --save-dev\n"})}),"\n",(0,t.jsx)(n.h3,{id:"config-lint-staged",children:"Config lint-staged"}),"\n",(0,t.jsxs)(n.p,{children:["Based on ",(0,t.jsx)(n.a,{href:"https://github.com/okonet/lint-staged",children:"lint-staged document"}),", we can config lint-staged in ",(0,t.jsx)(n.code,{children:".lintstagedrc"})," file with ",(0,t.jsx)(n.code,{children:"JSON"})," or ",(0,t.jsx)(n.code,{children:"YAML"})," format."]}),"\n",(0,t.jsxs)(n.p,{children:["Let's create a file called ",(0,t.jsx)(n.code,{children:".lintstagedrc.json"})," at the root directory and add the below lint-staged command in it. You can check ",(0,t.jsx)(n.code,{children:"lint-staged document"})," to figure out what command that lint-staged supports."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "src/**/*.+(js|json|ts|tsx)": ["eslint"],\n  "src/**/*.{js,jsx,ts,tsx,json,css,scss,md}": ["prettier --write"]\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"husky",children:"Husky"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://typicode.github.io/husky/#/?id=features",children:"Husky"})," is a tool to easily trigger the git hooks and run our scripts at each stage of a commit."]}),"\n",(0,t.jsx)(n.h3,{id:"install-husky",children:"Install Husky"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.em,{children:["When I write this article, the latest version of Husky is ",(0,t.jsx)(n.code,{children:"7"})]})}),"\n",(0,t.jsx)(n.p,{children:"Run the below command:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install husky --save-dev\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In the ",(0,t.jsx)(n.code,{children:"pacakge.json"})," file, You should have:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'// package.json\n{\n  "scripts": {\n    "prepare": "husky install"\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"enable-git-hooks",children:"Enable Git hooks"}),"\n",(0,t.jsx)(n.p,{children:"Run the below code to enable git hooks"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npx husky install\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Optional: If you want to enable git hooks automatically after install, you can run:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'npm set-script prepare "husky install"\n'})}),"\n",(0,t.jsxs)(n.p,{children:["There will be a ",(0,t.jsx)(n.code,{children:".husky/"})," folder created in your project, where you can put your git hooks scripts."]}),"\n",(0,t.jsx)(n.p,{children:"For example, run"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'npx husky add .husky/pre-commit "npm test"\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This command will create a ",(0,t.jsx)(n.code,{children:"pre-commit"})," file in the ",(0,t.jsx)(n.code,{children:".husky"})," folder with content ",(0,t.jsx)(n.code,{children:"npm test"}),". Each time when you push a new commit, it will the test at first, if the test failed, the whole commit will be automatically aborted."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"NOTE:"})})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["By design, ",(0,t.jsx)(n.code,{children:"husky install"})," must be run in the same directory as ",(0,t.jsx)(n.code,{children:".git"}),", but you can change directory during prepare script and pass a subdirectory:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'// package.json\n{\n  "scripts": {\n    "prepare": "cd .. && husky install front/.husky"\n  }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"In your hooks, you'll also need to change directory:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# .husky/pre-commit\n# ...\ncd front\nnpm test\n"})}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"support-commitlint-with-commit-msg-git-hook",children:"Support commitlint with commit-msg git hook"}),"\n",(0,t.jsxs)(n.p,{children:["Add ",(0,t.jsx)(n.code,{children:"commit-msg"})," file at your root directory with the below command:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npx husky add .husky/commit-msg 'npx --no-install commitlint --edit \"$1\"'\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"commit-msg"})," is a git hook that can validate your project state or commit message before allowing a commit to go through."]}),"\n",(0,t.jsx)(n.p,{children:"Now if you commit your code again, you will find you can only commit your changes with following the conventional commit message format."}),"\n",(0,t.jsx)(n.h3,{id:"support-lint-staged-with-pre-commit-git-hook",children:"Support lint-staged with pre-commit git hook"}),"\n",(0,t.jsxs)(n.p,{children:["Add ",(0,t.jsx)(n.code,{children:"pre-commit"})," file at your root directory with the below command:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npx husky add .husky/pre-commit 'npm run lint-staged'\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Open your ",(0,t.jsx)(n.code,{children:"package.json"})," file, add the below code to the ",(0,t.jsx)(n.code,{children:"scripts"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  // ...\n  "scripts:" {\n    // ...\n    "lint-staged": "lint-staged",\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Now go to ",(0,t.jsx)(n.code,{children:".husky/pre-commit"})," file, add the below code to the file"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'#!/bin/sh\n. "$(dirname "$0")/_/husky.sh"\n\nnpm run lint-staged\n'})}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsx)(n.p,{children:"Now if you commit the changes of your project again,"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"ESLint"})," and ",(0,t.jsx)(n.code,{children:"Prettier"}),"\nwill check your code quality and format of your changed files at ",(0,t.jsx)(n.code,{children:"pre-commit"})," hook stage."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["The tool ",(0,t.jsx)(n.code,{children:"commitlint"})," will check if your commit message follow the ",(0,t.jsx)(n.code,{children:"Conventional Commit Format"})," at ",(0,t.jsx)(n.code,{children:"commit-msg"})," stage."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"NOTE: pre-commit will be trigger at first and then commitlint get triggered"})}),"\n",(0,t.jsx)(n.p,{children:"Either of above steps failed, the whole commit will be aborted, which means you won't commit your dirty code to the repository any more."}),"\n",(0,t.jsxs)(n.p,{children:["Overall, in this article, we use ",(0,t.jsx)(n.code,{children:"Husky"})," to control two git states before pushing a commit to remote repository."]}),"\n",(0,t.jsxs)(n.p,{children:["One is using ",(0,t.jsx)(n.code,{children:"lint-staged"})," to check staged specific files (configured in ",(0,t.jsx)(n.code,{children:".lintstagedrc"}),") with ",(0,t.jsx)(n.code,{children:"eslint"})," (to check code quality) and ",(0,t.jsx)(n.code,{children:"prettier"})," (to check code style) at ",(0,t.jsx)(n.code,{children:"pre-commit"})," stage."]}),"\n",(0,t.jsxs)(n.p,{children:["The other one is using ",(0,t.jsx)(n.code,{children:"commitlint"})," to force to format the commit message at ",(0,t.jsx)(n.code,{children:"commit-msg"})," stage."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},5296:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var t=i(758);const s={},r=t.createContext(s);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);