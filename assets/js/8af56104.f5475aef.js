"use strict";(self.webpackChunktechnical_tutorial=self.webpackChunktechnical_tutorial||[]).push([[4306],{3313:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>s,default:()=>l,frontMatter:()=>o,metadata:()=>c,toc:()=>i});var a=t(6070),r=t(5296);const o={},s="Create Theme for React Native App",c={id:"software-engineer/frontend/reactnative/create-theme-for-react-native-app",title:"Create Theme for React Native App",description:"1. Create a custom theme to support multiple themes from other libraries",source:"@site/docs/software-engineer/frontend/reactnative/create-theme-for-react-native-app.md",sourceDirName:"software-engineer/frontend/reactnative",slug:"/software-engineer/frontend/reactnative/create-theme-for-react-native-app",permalink:"/TechnicalTutorial/docs/software-engineer/frontend/reactnative/create-theme-for-react-native-app",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{}},h={},i=[];function d(e){const n={code:"code",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"create-theme-for-react-native-app",children:"Create Theme for React Native App"})}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Create a custom theme to support multiple themes from other libraries"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["For example, if we have ",(0,a.jsx)(n.code,{children:"react-navigation"})," and ",(0,a.jsx)(n.code,{children:"react-native-paper"})," which support Themes, we need to support ",(0,a.jsx)(n.code,{children:"react-navigation"})," theme, ",(0,a.jsx)(n.code,{children:"react-native-papaer"})," theme and our theme together."]}),"\n",(0,a.jsxs)(n.p,{children:["Create a ",(0,a.jsx)(n.code,{children:"theme.js"})," file with below code"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import {\n  DefaultTheme as NavigationDefaultTheme,\n  DarkTheme as NavigationDarkTheme,\n} from '@react-navigation/native';\n\nimport {\n  DefaultTheme as PaperDefaultTheme,\n  DarkTheme as PaperDarkTheme,\n} from 'react-native-paper';\n\nexport const defaultTheme = {\n  ...NavigationDefaultTheme,\n  ...PaperDefaultTheme,\n  colors: {\n    ...NavigationDefaultTheme.colors,\n    ...PaperDefaultTheme.colors,\n  },\n};\n\nexport const darkTheme = {\n  ...NavigationDarkTheme,\n  ...PaperDarkTheme,\n  colors: {\n    ...NavigationDarkTheme.colors,\n    ...PaperDarkTheme.colors,\n  },\n};\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"2",children:["\n",(0,a.jsxs)(n.li,{children:["Create ",(0,a.jsx)(n.code,{children:"contexts\\ThemeProvider\\index.js"})]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import React, {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n  useCallback,\n} from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nimport { defaultTheme, darkTheme } from '../../helpers/theme';\n\nconst ThemeContext = createContext();\n\nexport const THEMES = {\n  Light: 'light',\n  Dark: 'dark',\n  Default: 'light',\n};\n\nconst ThemeProvider = ({ children }) => {\n  const [theme, setTheme] = useState(defaultTheme);\n\n  const setThemeMode = (themeMode) => {\n    switch (themeMode) {\n      case THEMES.Light:\n        setTheme(defaultTheme);\n        break;\n      case THEMES.Dark:\n        setTheme(darkTheme);\n        break;\n      // case other theme modes\n      default:\n        setTheme(defaultTheme);\n    }\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, setThemeMode }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => useContext(ThemeContext);\n\nexport default ThemeProvider;\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"3",children:["\n",(0,a.jsxs)(n.li,{children:["Wrap the whole app in the ",(0,a.jsx)(n.code,{children:"ThemeProvider"})]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const App: () => Node = () => {\n  return (\n    <Provider store={store}>\n      <SafeAreaProvider>\n        <ThemeProvider>\n          <RootStackNavigator />\n        </ThemeProvider>\n      </SafeAreaProvider>\n    </Provider>\n  );\n};\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"4",children:["\n",(0,a.jsxs)(n.li,{children:["Add ",(0,a.jsx)(n.code,{children:"AsyncStorage"})," to the app"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm install @react-native-async-storage/async-storage\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"5",children:["\n",(0,a.jsx)(n.li,{children:"Get the theme value from the async storage when app launches."}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-diff",children:"const ThemeProvider = ({ children }) => {\n  const [theme, setTheme] = useState(defaultTheme);\n\n+  useEffect(() => {\n+    getThemeMode();\n+  }, [getThemeMode]);\n+\n+  const getThemeMode = useCallback(async () => {\n+    try {\n+      const themeMode = await AsyncStorage.getItem('themeMode');\n+      setThemeMode(themeMode);\n+    } catch (e) {}\n+  }, []);\n\n  const setThemeMode = (themeMode) => {\n    switch (themeMode) {\n      case THEMES.Light:\n        setTheme(defaultTheme);\n        break;\n      case THEMES.Dark:\n        setTheme(darkTheme);\n        break;\n      // case other theme modes\n      default:\n        setTheme(defaultTheme);\n    }\n  };\n\n  return <ThemeContext.Provider value={{ theme, setThemeMode }}>{children}</ThemeContext.Provider>;\n};\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"6",children:["\n",(0,a.jsx)(n.li,{children:"Store the theme into the async storage."}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["We can add a ",(0,a.jsx)(n.code,{children:"<Switch />"})," button into a screen to switch the theme and save the theme value into the async storage ."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-diff",children:"const Home = ({ navigation }) => {\n const { container } = styles;\n\n const { theme, setThemeMode } = useTheme();\n\n+  const [isSwitchOn, setIsSwitchOn] = React.useState(theme.dark);\n\n+  useEffect(() => {\n+    setAppTheme(isSwitchOn ? THEMES.Dark : THEMES.Light);\n+  }, [isSwitchOn, setAppTheme]);\n\n+  const setAppTheme = useCallback(\n+    async (themeMode) => {\n+      try {\n+        await AsyncStorage.setItem('themeMode', themeMode);\n+        setThemeMode(themeMode);\n+      } catch (e) {}\n+    },\n+    [setThemeMode],\n+  );\n\n return (\n   <View style={[container, { backgroundColor: theme.backgroundColor }]}>\n     <Button\n       title=\"Go to details page\"\n       onPress={() => {\n         navigation.navigate('details');\n       }}\n     />\n+      <Switch value={isSwitchOn} onValueChange={() => setIsSwitchOn(!isSwitchOn)} />\n     <Text>{theme.dark.toString()}</Text>\n   </View>\n );\n};\n\n"})})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},5296:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var a=t(758);const r={},o=a.createContext(r);function s(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);