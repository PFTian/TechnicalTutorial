"use strict";(self.webpackChunktechnical_tutorial=self.webpackChunktechnical_tutorial||[]).push([[519],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),s=u(n),m=a,h=s["".concat(c,".").concat(m)]||s[m]||p[m]||o;return n?r.createElement(h,i(i({ref:t},d),{},{components:n})):r.createElement(h,i({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=s;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},8142:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return p}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],l={},c="Add Redux to React Native",u={unversionedId:"reactnative/add-redux-to-react-native",id:"reactnative/add-redux-to-react-native",title:"Add Redux to React Native",description:"Step 1: Installation",source:"@site/docs/reactnative/add-redux-to-react-native.md",sourceDirName:"reactnative",slug:"/reactnative/add-redux-to-react-native",permalink:"/TechnicalTutorial/docs/reactnative/add-redux-to-react-native",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reactnative/add-redux-to-react-native.md",tags:[],version:"current",frontMatter:{},sidebar:"reactnativeSideBar",next:{title:"Create Theme for React Native App",permalink:"/TechnicalTutorial/docs/reactnative/create-theme-for-react-native-app"}},d={},p=[{value:"Step 1: Installation",id:"step-1-installation",level:2},{value:"Step 2: Create redux relative folders in the project",id:"step-2-create-redux-relative-folders-in-the-project",level:2},{value:"Step 3: Create relative elements in each folder",id:"step-3-create-relative-elements-in-each-folder",level:2},{value:"Step 4: Debug Redux with Redux Devtools Extension",id:"step-4-debug-redux-with-redux-devtools-extension",level:2},{value:"Other ways to support Redux <code>Devtools Extension</code> in react-native project.",id:"other-ways-to-support-redux-devtools-extension-in-react-native-project",level:3},{value:"In more general way, use <code>remote-redux-devtools</code> to debug redux in the react-native project.",id:"in-more-general-way-use-remote-redux-devtools-to-debug-redux-in-the-react-native-project",level:3}],s={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"add-redux-to-react-native"},"Add Redux to React Native"),(0,o.kt)("h2",{id:"step-1-installation"},"Step 1: Installation"),(0,o.kt)("p",null,"Install redux and react-redux packages."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm install redux react-redux\n")),(0,o.kt)("h2",{id:"step-2-create-redux-relative-folders-in-the-project"},"Step 2: Create redux relative folders in the project"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"\ud83d\udce6src\n \u2523 \ud83d\udcc2store\n    \u2523 \ud83d\udcc2actions\n    \u2503 \u2517 \ud83d\udcdcauth.js\n    \u2523 \ud83d\udcc2constants\n    \u2503 \u2517 \ud83d\udcdcauth.js\n    \u2523 \ud83d\udcc2reducers\n    \u2503 \u2517 \ud83d\udcdcauth.js\n    \u2517 \ud83d\udcdcconfigStore.js\n")),(0,o.kt)("h2",{id:"step-3-create-relative-elements-in-each-folder"},"Step 3: Create relative elements in each folder"),(0,o.kt)("p",null,"For example, if we want to use redux to record if an user is login the app, we can:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create an ",(0,o.kt)("inlineCode",{parentName:"p"},"auth.js")," file under ",(0,o.kt)("inlineCode",{parentName:"p"},"constants"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"actions")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"reducers")," folders.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"In the ",(0,o.kt)("inlineCode",{parentName:"p"},"constants/auth.js")," file, we add two variables"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const LOGIN = 'LOGIN';\nconst LOGOUT = 'LOGOUT';\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"In the ",(0,o.kt)("inlineCode",{parentName:"p"},"actions/auth.js")," file, we create two actions for user to ",(0,o.kt)("inlineCode",{parentName:"p"},"login/logout"),"."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { LOGIN, LOGOUT } from '../constants/auth';\n\nexport const login = (userInfo) => {\n  return {\n    type: LOGIN,\n    payload: userInfo,\n  };\n};\n\nexport const logout = () => {\n  return {\n    type: LOGOUT,\n  };\n};\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"In the ",(0,o.kt)("inlineCode",{parentName:"p"},"reducers/auth.js")," file, we create a reducer to handle the state change request from actions based on constant types."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { LOGIN, LOGOUT } from '../constants/auth';\n\nconst initialState = {\n  username: null,\n  token: null,\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case LOGIN:\n      return {\n        ...state,\n        username: action.payload.username,\n        token: action.payload.token,\n      };\n    case LOGOUT:\n      return {\n        username: null,\n        token: null,\n      };\n    default:\n      return initialState;\n  }\n};\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Initialize a redux store for the whole app. At the root of store folder, we add a ",(0,o.kt)("inlineCode",{parentName:"p"},"configStore.js")," file and add below code."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { createStore, combineReducers } from 'redux';\nimport authReducer from './reducers/auth';\n\nconst rootReducer = combineReducers({ auth: authReducer });\n\nexport default () => {\n  return createStore(rootReducer);\n};\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"In the ",(0,o.kt)("inlineCode",{parentName:"p"},"App.js")," file to ",(0,o.kt)("inlineCode",{parentName:"p"},"import")," the ",(0,o.kt)("inlineCode",{parentName:"p"},"configStore"),", and put the configured store to the react-redux ",(0,o.kt)("inlineCode",{parentName:"p"},"Provider"),"."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"")))),(0,o.kt)("h2",{id:"step-4-debug-redux-with-redux-devtools-extension"},"Step 4: Debug Redux with ",(0,o.kt)("a",{parentName:"h2",href:"https://github.com/zalmoxisus/redux-devtools-extension"},"Redux Devtools Extension")),(0,o.kt)("p",null,"Install the corresponding ",(0,o.kt)("inlineCode",{parentName:"p"},"Redux Devtools Extension")," browser plugin."),(0,o.kt)("p",null,"Install the redux-devtools-extension"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"npm install --save redux-devtools-extension\n")),(0,o.kt)("p",null,"For the case where you don't include other enhancers and middlewares, just use ",(0,o.kt)("inlineCode",{parentName:"p"},"devToolsEnhancer"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { createStore, combineReducers } from 'redux';\nimport { devToolsEnhancer } from 'redux-devtools-extension';\n\nimport authReducer from './reducers/auth';\n\nconst rootReducer = combineReducers({ auth: authReducer });\n\nexport default () => {\n  return createStore(rootReducer, devToolsEnhancer());\n};\n")),(0,o.kt)("p",null,"For the case where you use other enhancers and middlewares like ",(0,o.kt)("inlineCode",{parentName:"p"},"redux-thunk"),", use ",(0,o.kt)("inlineCode",{parentName:"p"},"applyMiddleware")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"composeWithDevTools"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport authReducer from './reducers/auth';\n\nconst rootReducer = combineReducers({ auth: authReducer });\n\nexport default () => {\n  return createStore(\n    rootReducer,\n    composeWithDevTools(applyMiddleware(ReduxThunk))\n  );\n};\n")),(0,o.kt)("h3",{id:"other-ways-to-support-redux-devtools-extension-in-react-native-project"},"Other ways to support Redux ",(0,o.kt)("inlineCode",{parentName:"h3"},"Devtools Extension")," in react-native project."),(0,o.kt)("p",null,"For a basic Redux store simply add:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"}," const store = createStore(\n   reducer, /* preloadedState, */\n+  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n );\n")),(0,o.kt)("p",null,"If you setup your store with middleware and enhancers, change:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"  import { createStore, applyMiddleware, compose } from 'redux';\n\n+ const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n+ const store = createStore(reducer, /* preloadedState, */ composeEnhancers(\n- const store = createStore(reducer, /* preloadedState, */ compose(\n    applyMiddleware(...middleware)\n  ));\n")),(0,o.kt)("h3",{id:"in-more-general-way-use-remote-redux-devtools-to-debug-redux-in-the-react-native-project"},"In more general way, use ",(0,o.kt)("a",{parentName:"h3",href:"https://github.com/zalmoxisus/remote-redux-devtools"},(0,o.kt)("inlineCode",{parentName:"a"},"remote-redux-devtools"))," to debug redux in the react-native project."))}m.isMDXComponent=!0}}]);