"use strict";(self.webpackChunktechnical_tutorial=self.webpackChunktechnical_tutorial||[]).push([[5067],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return u}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),m=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=m(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),h=m(n),u=r,d=h["".concat(s,".").concat(u)]||h[u]||p[u]||o;return n?a.createElement(d,i(i({ref:t},l),{},{components:n})):a.createElement(d,i({ref:t},l))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=h;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var m=2;m<o;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},4943:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return c},metadata:function(){return m},toc:function(){return p}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],c={},s="Create Theme for React Native App",m={unversionedId:"reactnative/create-theme-for-react-native-app",id:"reactnative/create-theme-for-react-native-app",title:"Create Theme for React Native App",description:"1. Create a custom theme to support multiple themes from other libraries",source:"@site/docs/reactnative/create-theme-for-react-native-app.md",sourceDirName:"reactnative",slug:"/reactnative/create-theme-for-react-native-app",permalink:"/docs/reactnative/create-theme-for-react-native-app",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reactnative/create-theme-for-react-native-app.md",tags:[],version:"current",frontMatter:{},sidebar:"reactnativeSideBar",previous:{title:"Add Redux to React Native",permalink:"/docs/reactnative/add-redux-to-react-native"},next:{title:"Tips",permalink:"/docs/reactnative/tips"}},l={},p=[],h={toc:p};function u(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"create-theme-for-react-native-app"},"Create Theme for React Native App"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Create a custom theme to support multiple themes from other libraries")),(0,o.kt)("p",null,"For example, if we have ",(0,o.kt)("inlineCode",{parentName:"p"},"react-navigation")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"react-native-paper")," which support Themes, we need to support ",(0,o.kt)("inlineCode",{parentName:"p"},"react-navigation")," theme, ",(0,o.kt)("inlineCode",{parentName:"p"},"react-native-papaer")," theme and our theme together."),(0,o.kt)("p",null,"Create a ",(0,o.kt)("inlineCode",{parentName:"p"},"theme.js")," file with below code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import {\n  DefaultTheme as NavigationDefaultTheme,\n  DarkTheme as NavigationDarkTheme,\n} from '@react-navigation/native';\n\nimport {\n  DefaultTheme as PaperDefaultTheme,\n  DarkTheme as PaperDarkTheme,\n} from 'react-native-paper';\n\nexport const defaultTheme = {\n  ...NavigationDefaultTheme,\n  ...PaperDefaultTheme,\n  colors: {\n    ...NavigationDefaultTheme.colors,\n    ...PaperDefaultTheme.colors,\n  },\n};\n\nexport const darkTheme = {\n  ...NavigationDarkTheme,\n  ...PaperDarkTheme,\n  colors: {\n    ...NavigationDarkTheme.colors,\n    ...PaperDarkTheme.colors,\n  },\n};\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Create ",(0,o.kt)("inlineCode",{parentName:"li"},"contexts\\ThemeProvider\\index.js"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import React, {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n  useCallback,\n} from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nimport { defaultTheme, darkTheme } from '../../helpers/theme';\n\nconst ThemeContext = createContext();\n\nexport const THEMES = {\n  Light: 'light',\n  Dark: 'dark',\n  Default: 'light',\n};\n\nconst ThemeProvider = ({ children }) => {\n  const [theme, setTheme] = useState(defaultTheme);\n\n  const setThemeMode = (themeMode) => {\n    switch (themeMode) {\n      case THEMES.Light:\n        setTheme(defaultTheme);\n        break;\n      case THEMES.Dark:\n        setTheme(darkTheme);\n        break;\n      // case other theme modes\n      default:\n        setTheme(defaultTheme);\n    }\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, setThemeMode }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => useContext(ThemeContext);\n\nexport default ThemeProvider;\n")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"Wrap the whole app in the ",(0,o.kt)("inlineCode",{parentName:"li"},"ThemeProvider"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const App: () => Node = () => {\n  return (\n    <Provider store={store}>\n      <SafeAreaProvider>\n        <ThemeProvider>\n          <RootStackNavigator />\n        </ThemeProvider>\n      </SafeAreaProvider>\n    </Provider>\n  );\n};\n")),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},"Add ",(0,o.kt)("inlineCode",{parentName:"li"},"AsyncStorage")," to the app")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @react-native-async-storage/async-storage\n")),(0,o.kt)("ol",{start:5},(0,o.kt)("li",{parentName:"ol"},"Get the theme value from the async storage when app launches.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"const ThemeProvider = ({ children }) => {\n  const [theme, setTheme] = useState(defaultTheme);\n\n+  useEffect(() => {\n+    getThemeMode();\n+  }, [getThemeMode]);\n+\n+  const getThemeMode = useCallback(async () => {\n+    try {\n+      const themeMode = await AsyncStorage.getItem('themeMode');\n+      setThemeMode(themeMode);\n+    } catch (e) {}\n+  }, []);\n\n  const setThemeMode = (themeMode) => {\n    switch (themeMode) {\n      case THEMES.Light:\n        setTheme(defaultTheme);\n        break;\n      case THEMES.Dark:\n        setTheme(darkTheme);\n        break;\n      // case other theme modes\n      default:\n        setTheme(defaultTheme);\n    }\n  };\n\n  return <ThemeContext.Provider value={{ theme, setThemeMode }}>{children}</ThemeContext.Provider>;\n};\n")),(0,o.kt)("ol",{start:6},(0,o.kt)("li",{parentName:"ol"},"Store the theme into the async storage.")),(0,o.kt)("p",null,"We can add a ",(0,o.kt)("inlineCode",{parentName:"p"},"<Switch />")," button into a screen to switch the theme and save the theme value into the async storage ."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"const Home = ({ navigation }) => {\n const { container } = styles;\n\n const { theme, setThemeMode } = useTheme();\n\n+  const [isSwitchOn, setIsSwitchOn] = React.useState(theme.dark);\n\n+  useEffect(() => {\n+    setAppTheme(isSwitchOn ? THEMES.Dark : THEMES.Light);\n+  }, [isSwitchOn, setAppTheme]);\n\n+  const setAppTheme = useCallback(\n+    async (themeMode) => {\n+      try {\n+        await AsyncStorage.setItem('themeMode', themeMode);\n+        setThemeMode(themeMode);\n+      } catch (e) {}\n+    },\n+    [setThemeMode],\n+  );\n\n return (\n   <View style={[container, { backgroundColor: theme.backgroundColor }]}>\n     <Button\n       title=\"Go to details page\"\n       onPress={() => {\n         navigation.navigate('details');\n       }}\n     />\n+      <Switch value={isSwitchOn} onValueChange={() => setIsSwitchOn(!isSwitchOn)} />\n     <Text>{theme.dark.toString()}</Text>\n   </View>\n );\n};\n\n")))}u.isMDXComponent=!0}}]);